name: Secure RDP (XFCE4 on Linux) - Opsi B (fix password generation)

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: ubuntu-latest
    timeout-minutes: 3600

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install XFCE4, Xorg, xrdp and prerequisites (no netcat)
        run: |
          sudo apt-get update -y
          # Install XFCE4 desktop, xrdp and required packages (no netcat)
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y xfce4 xfce4-goodies xorg dbus-x11 xrdp curl openssl
          # Ensure xrdp is enabled and running
          sudo systemctl enable --now xrdp

      - name: Create user AiraaCheisyaa with secure password (fixed)
        run: |
          set -euo pipefail
          USERNAME="AiraaCheisyaa"
          MINLEN=12
          PASSLEN=16

          if id "$USERNAME" >/dev/null 2>&1; then
            echo "User $USERNAME already exists - resetting password"
          else
            echo "Creating user $USERNAME"
            sudo useradd -m -s /bin/bash -G sudo "$USERNAME"
          fi

          # Try openssl-based password generation first (robust)
          PASSWORD=""
          if command -v openssl >/dev/null 2>&1; then
            PASSWORD=$(openssl rand -base64 48 2>/dev/null | tr -dc 'A-Za-z0-9!@#$%&*()-_=+[]{}:;,.?/' | head -c ${PASSLEN} || true)
          fi

          # Fallback if openssl not available or output too short
          if [ -z "${PASSWORD}" ] || [ "${#PASSWORD}" -lt "${MINLEN}" ]; then
            echo "openssl not available or produced short password — using /dev/urandom fallback"
            # Use head to read a finite chunk then tr (avoids SIGPIPE issues)
            PASSWORD=$(head -c 512 /dev/urandom | tr -dc 'A-Za-z0-9!@#$%&*()-_=+[]{}:;,.?/' | head -c ${PASSLEN} || true)
          fi

          # Final safety: if still short, build a deterministic fallback (guaranteed)
          if [ -z "${PASSWORD}" ] || [ "${#PASSWORD}" -lt "${MINLEN}" ]; then
            echo "All generation methods failed or returned short password — using deterministic fallback"
            # deterministic fallback (not ideal but ensures workflow proceeds)
            PASSWORD="$(date +%s)X$(hostname | tr -dc 'a-zA-Z0-9' | head -c8)"
          fi

          # Apply password, add to sudo group and configure XFCE session
          echo "${USERNAME}:${PASSWORD}" | sudo chpasswd
          sudo usermod -aG sudo "$USERNAME" || true

          sudo -H -u "$USERNAME" bash -lc 'mkdir -p ~/.config && echo "startxfce4" > ~/.xsession && chmod 644 ~/.xsession'

          # Export credentials safely to GITHUB_ENV (use separate vars)
          echo "RDP_USER=${USERNAME}" >> $GITHUB_ENV
          echo "RDP_PASS=${PASSWORD}" >> $GITHUB_ENV

          # Sanity check
          if ! id "$USERNAME" >/dev/null 2>&1; then
            echo "User creation failed" >&2
            exit 1
          fi

      - name: (Optional) Allow 3389 in UFW if available
        run: |
          if command -v ufw >/dev/null 2>&1; then
            sudo ufw allow 3389/tcp || true
          fi

      - name: Install Tailscale
        run: |
          # Install Tailscale using official install script
          curl -fsSL https://tailscale.com/install.sh | sudo sh

      - name: Bring up Tailscale and get Tailscale IP
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          set -euo pipefail

          if [ -z "${TAILSCALE_AUTH_KEY:-}" ]; then
            echo "Missing TAILSCALE_AUTH_KEY secret. Please add it to repo secrets." >&2
            exit 1
          fi

          HOSTNAME="gh-runner-${GITHUB_RUN_ID}"
          # Start tailscale with provided auth key
          sudo tailscale up --authkey="${TAILSCALE_AUTH_KEY}" --hostname="${HOSTNAME}" || {
            echo "tailscale up failed" >&2
            exit 1
          }

          # Get IPv4 Tailscale address (retry a few times)
          TAILSCALE_IP=""
          for i in $(seq 1 10); do
            TAILSCALE_IP=$(tailscale ip -4 2>/dev/null | awk 'NR==1{print $1}' || true)
            if [ -n "${TAILSCALE_IP}" ]; then break; fi
            sleep 2
          done

          if [ -z "${TAILSCALE_IP}" ]; then
            echo "Tailscale IP not assigned. Exiting." >&2
            exit 1
          fi

          echo "TAILSCALE_IP=${TAILSCALE_IP}" >> $GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=${HOSTNAME}" >> $GITHUB_ENV

      - name: Verify RDP (xrdp) accessibility over Tailscale using /dev/tcp
        run: |
          set -euo pipefail
          if [ -z "${TAILSCALE_IP:-}" ]; then
            echo "TAILSCALE_IP is empty or not set. Aborting." >&2
            exit 1
          fi
          echo "Testing connectivity to ${TAILSCALE_IP}:3389"

          if timeout 5 bash -c "cat < /dev/tcp/${TAILSCALE_IP}/3389" >/dev/null 2>&1; then
            echo "TCP connectivity to port 3389 succeeded"
          else
            echo "TCP connection to RDP port 3389 failed" >&2
            exit 1
          fi

      - name: Maintain Connection and display access info
        run: |
          set -euo pipefail
          echo
          echo "=== RDP ACCESS ==="
          echo "Address: ${TAILSCALE_IP}"
          echo "Username: ${RDP_USER:-}"
          echo "Password: ${RDP_PASS:-}"
          echo "=================="
          echo ""
          while true; do
            echo "[$(date -u +"%Y-%m-%dT%H:%M:%SZ")] RDP Active - Use Cancel Workflow in Actions UI to terminate"
            sleep 300
          done
